// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BUSINESSBAILOUTHOSTPAYLOAD_H_
#define FLATBUFFERS_GENERATED_BUSINESSBAILOUTHOSTPAYLOAD_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct PlayerBailout;
struct PlayerBailoutBuilder;

struct BusinessBailoutHostPayload;
struct BusinessBailoutHostPayloadBuilder;

struct PlayerBailout FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerBailoutBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_VALUE = 6,
    VT_TIME = 8
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  int32_t value() const {
    return GetField<int32_t>(VT_VALUE, 0);
  }
  uint32_t time() const {
    return GetField<uint32_t>(VT_TIME, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_VALUE, 4) &&
           VerifyField<uint32_t>(verifier, VT_TIME, 4) &&
           verifier.EndTable();
  }
};

struct PlayerBailoutBuilder {
  typedef PlayerBailout Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(PlayerBailout::VT_NAME, name);
  }
  void add_value(int32_t value) {
    fbb_.AddElement<int32_t>(PlayerBailout::VT_VALUE, value, 0);
  }
  void add_time(uint32_t time) {
    fbb_.AddElement<uint32_t>(PlayerBailout::VT_TIME, time, 0);
  }
  explicit PlayerBailoutBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PlayerBailout> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PlayerBailout>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PlayerBailout> CreatePlayerBailout(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    int32_t value = 0,
    uint32_t time = 0) {
  PlayerBailoutBuilder builder_(_fbb);
  builder_.add_time(time);
  builder_.add_value(value);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PlayerBailout> CreatePlayerBailoutDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int32_t value = 0,
    uint32_t time = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return CreatePlayerBailout(
      _fbb,
      name__,
      value,
      time);
}

struct BusinessBailoutHostPayload FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BusinessBailoutHostPayloadBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4,
    VT_TIME = 6,
    VT_BAILED_PLAYERS = 8
  };
  int32_t value() const {
    return GetField<int32_t>(VT_VALUE, 0);
  }
  uint32_t time() const {
    return GetField<uint32_t>(VT_TIME, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<PlayerBailout>> *bailed_players() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<PlayerBailout>> *>(VT_BAILED_PLAYERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_VALUE, 4) &&
           VerifyField<uint32_t>(verifier, VT_TIME, 4) &&
           VerifyOffset(verifier, VT_BAILED_PLAYERS) &&
           verifier.VerifyVector(bailed_players()) &&
           verifier.VerifyVectorOfTables(bailed_players()) &&
           verifier.EndTable();
  }
};

struct BusinessBailoutHostPayloadBuilder {
  typedef BusinessBailoutHostPayload Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(int32_t value) {
    fbb_.AddElement<int32_t>(BusinessBailoutHostPayload::VT_VALUE, value, 0);
  }
  void add_time(uint32_t time) {
    fbb_.AddElement<uint32_t>(BusinessBailoutHostPayload::VT_TIME, time, 0);
  }
  void add_bailed_players(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<PlayerBailout>>> bailed_players) {
    fbb_.AddOffset(BusinessBailoutHostPayload::VT_BAILED_PLAYERS, bailed_players);
  }
  explicit BusinessBailoutHostPayloadBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<BusinessBailoutHostPayload> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BusinessBailoutHostPayload>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<BusinessBailoutHostPayload> CreateBusinessBailoutHostPayload(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t value = 0,
    uint32_t time = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<PlayerBailout>>> bailed_players = 0) {
  BusinessBailoutHostPayloadBuilder builder_(_fbb);
  builder_.add_bailed_players(bailed_players);
  builder_.add_time(time);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<BusinessBailoutHostPayload> CreateBusinessBailoutHostPayloadDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t value = 0,
    uint32_t time = 0,
    const std::vector<::flatbuffers::Offset<PlayerBailout>> *bailed_players = nullptr) {
  auto bailed_players__ = bailed_players ? _fbb.CreateVector<::flatbuffers::Offset<PlayerBailout>>(*bailed_players) : 0;
  return CreateBusinessBailoutHostPayload(
      _fbb,
      value,
      time,
      bailed_players__);
}

inline const BusinessBailoutHostPayload *GetBusinessBailoutHostPayload(const void *buf) {
  return ::flatbuffers::GetRoot<BusinessBailoutHostPayload>(buf);
}

inline const BusinessBailoutHostPayload *GetSizePrefixedBusinessBailoutHostPayload(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<BusinessBailoutHostPayload>(buf);
}

inline bool VerifyBusinessBailoutHostPayloadBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<BusinessBailoutHostPayload>(nullptr);
}

inline bool VerifySizePrefixedBusinessBailoutHostPayloadBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<BusinessBailoutHostPayload>(nullptr);
}

inline void FinishBusinessBailoutHostPayloadBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<BusinessBailoutHostPayload> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedBusinessBailoutHostPayloadBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<BusinessBailoutHostPayload> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_BUSINESSBAILOUTHOSTPAYLOAD_H_
