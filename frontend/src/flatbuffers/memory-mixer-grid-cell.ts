// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { MemoryMixerIconType } from './memory-mixer-icon-type.js';


export class MemoryMixerGridCell {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MemoryMixerGridCell {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMemoryMixerGridCell(bb:flatbuffers.ByteBuffer, obj?:MemoryMixerGridCell):MemoryMixerGridCell {
  return (obj || new MemoryMixerGridCell()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMemoryMixerGridCell(bb:flatbuffers.ByteBuffer, obj?:MemoryMixerGridCell):MemoryMixerGridCell {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MemoryMixerGridCell()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

icon():MemoryMixerIconType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : MemoryMixerIconType.BALLOON;
}

playersOnCard():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

isHighlighted():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startMemoryMixerGridCell(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addIcon(builder:flatbuffers.Builder, icon:MemoryMixerIconType) {
  builder.addFieldInt8(0, icon, MemoryMixerIconType.BALLOON);
}

static addPlayersOnCard(builder:flatbuffers.Builder, playersOnCard:number) {
  builder.addFieldInt16(1, playersOnCard, 0);
}

static addIsHighlighted(builder:flatbuffers.Builder, isHighlighted:boolean) {
  builder.addFieldInt8(2, +isHighlighted, +false);
}

static endMemoryMixerGridCell(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMemoryMixerGridCell(builder:flatbuffers.Builder, icon:MemoryMixerIconType, playersOnCard:number, isHighlighted:boolean):flatbuffers.Offset {
  MemoryMixerGridCell.startMemoryMixerGridCell(builder);
  MemoryMixerGridCell.addIcon(builder, icon);
  MemoryMixerGridCell.addPlayersOnCard(builder, playersOnCard);
  MemoryMixerGridCell.addIsHighlighted(builder, isHighlighted);
  return MemoryMixerGridCell.endMemoryMixerGridCell(builder);
}
}
