// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class FBLeaderboardPlayer {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FBLeaderboardPlayer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFBLeaderboardPlayer(bb:flatbuffers.ByteBuffer, obj?:FBLeaderboardPlayer):FBLeaderboardPlayer {
  return (obj || new FBLeaderboardPlayer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFBLeaderboardPlayer(bb:flatbuffers.ByteBuffer, obj?:FBLeaderboardPlayer):FBLeaderboardPlayer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FBLeaderboardPlayer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

score():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

deltaScore():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

deltaPosition():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startFBLeaderboardPlayer(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addScore(builder:flatbuffers.Builder, score:bigint) {
  builder.addFieldInt64(1, score, BigInt('0'));
}

static addDeltaScore(builder:flatbuffers.Builder, deltaScore:bigint) {
  builder.addFieldInt64(2, deltaScore, BigInt('0'));
}

static addDeltaPosition(builder:flatbuffers.Builder, deltaPosition:number) {
  builder.addFieldInt32(3, deltaPosition, 0);
}

static endFBLeaderboardPlayer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFBLeaderboardPlayer(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, score:bigint, deltaScore:bigint, deltaPosition:number):flatbuffers.Offset {
  FBLeaderboardPlayer.startFBLeaderboardPlayer(builder);
  FBLeaderboardPlayer.addName(builder, nameOffset);
  FBLeaderboardPlayer.addScore(builder, score);
  FBLeaderboardPlayer.addDeltaScore(builder, deltaScore);
  FBLeaderboardPlayer.addDeltaPosition(builder, deltaPosition);
  return FBLeaderboardPlayer.endFBLeaderboardPlayer(builder);
}
}
