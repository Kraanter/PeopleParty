// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class MemoryMixerPlayerSubmitted {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MemoryMixerPlayerSubmitted {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMemoryMixerPlayerSubmitted(bb:flatbuffers.ByteBuffer, obj?:MemoryMixerPlayerSubmitted):MemoryMixerPlayerSubmitted {
  return (obj || new MemoryMixerPlayerSubmitted()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMemoryMixerPlayerSubmitted(bb:flatbuffers.ByteBuffer, obj?:MemoryMixerPlayerSubmitted):MemoryMixerPlayerSubmitted {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MemoryMixerPlayerSubmitted()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

submitted():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

x():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

y():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

static startMemoryMixerPlayerSubmitted(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addSubmitted(builder:flatbuffers.Builder, submitted:boolean) {
  builder.addFieldInt8(0, +submitted, +false);
}

static addX(builder:flatbuffers.Builder, x:number) {
  builder.addFieldInt16(1, x, 0);
}

static addY(builder:flatbuffers.Builder, y:number) {
  builder.addFieldInt16(2, y, 0);
}

static endMemoryMixerPlayerSubmitted(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMemoryMixerPlayerSubmitted(builder:flatbuffers.Builder, submitted:boolean, x:number, y:number):flatbuffers.Offset {
  MemoryMixerPlayerSubmitted.startMemoryMixerPlayerSubmitted(builder);
  MemoryMixerPlayerSubmitted.addSubmitted(builder, submitted);
  MemoryMixerPlayerSubmitted.addX(builder, x);
  MemoryMixerPlayerSubmitted.addY(builder, y);
  return MemoryMixerPlayerSubmitted.endMemoryMixerPlayerSubmitted(builder);
}
}
