// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class MemoryMixerPlayerInputPayload {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MemoryMixerPlayerInputPayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMemoryMixerPlayerInputPayload(bb:flatbuffers.ByteBuffer, obj?:MemoryMixerPlayerInputPayload):MemoryMixerPlayerInputPayload {
  return (obj || new MemoryMixerPlayerInputPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMemoryMixerPlayerInputPayload(bb:flatbuffers.ByteBuffer, obj?:MemoryMixerPlayerInputPayload):MemoryMixerPlayerInputPayload {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MemoryMixerPlayerInputPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

x():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

y():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

static startMemoryMixerPlayerInputPayload(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addX(builder:flatbuffers.Builder, x:number) {
  builder.addFieldInt16(0, x, 0);
}

static addY(builder:flatbuffers.Builder, y:number) {
  builder.addFieldInt16(1, y, 0);
}

static endMemoryMixerPlayerInputPayload(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMemoryMixerPlayerInputPayload(builder:flatbuffers.Builder, x:number, y:number):flatbuffers.Offset {
  MemoryMixerPlayerInputPayload.startMemoryMixerPlayerInputPayload(builder);
  MemoryMixerPlayerInputPayload.addX(builder, x);
  MemoryMixerPlayerInputPayload.addY(builder, y);
  return MemoryMixerPlayerInputPayload.endMemoryMixerPlayerInputPayload(builder);
}
}
