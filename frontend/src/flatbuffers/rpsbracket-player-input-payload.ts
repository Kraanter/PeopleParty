// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FB_RPSChoice } from './fb-rpschoice.js';


export class RPSBracketPlayerInputPayload {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RPSBracketPlayerInputPayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRPSBracketPlayerInputPayload(bb:flatbuffers.ByteBuffer, obj?:RPSBracketPlayerInputPayload):RPSBracketPlayerInputPayload {
  return (obj || new RPSBracketPlayerInputPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRPSBracketPlayerInputPayload(bb:flatbuffers.ByteBuffer, obj?:RPSBracketPlayerInputPayload):RPSBracketPlayerInputPayload {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RPSBracketPlayerInputPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

choice():FB_RPSChoice {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : FB_RPSChoice.ROCK;
}

static startRPSBracketPlayerInputPayload(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addChoice(builder:flatbuffers.Builder, choice:FB_RPSChoice) {
  builder.addFieldInt8(0, choice, FB_RPSChoice.ROCK);
}

static endRPSBracketPlayerInputPayload(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRPSBracketPlayerInputPayload(builder:flatbuffers.Builder, choice:FB_RPSChoice):flatbuffers.Offset {
  RPSBracketPlayerInputPayload.startRPSBracketPlayerInputPayload(builder);
  RPSBracketPlayerInputPayload.addChoice(builder, choice);
  return RPSBracketPlayerInputPayload.endRPSBracketPlayerInputPayload(builder);
}
}
