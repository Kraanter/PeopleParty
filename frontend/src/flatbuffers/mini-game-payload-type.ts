// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { GameStatePayload, unionToGameStatePayload, unionListToGameStatePayload } from './game-state-payload.js';
import { GameStateType } from './game-state-type.js';


export class MiniGamePayloadType {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MiniGamePayloadType {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMiniGamePayloadType(bb:flatbuffers.ByteBuffer, obj?:MiniGamePayloadType):MiniGamePayloadType {
  return (obj || new MiniGamePayloadType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMiniGamePayloadType(bb:flatbuffers.ByteBuffer, obj?:MiniGamePayloadType):MiniGamePayloadType {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MiniGamePayloadType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

minigame():string|null
minigame(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
minigame(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

gamestatetype():GameStateType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : GameStateType.CrazyCountingHostEntities;
}

gamestatepayloadType():GameStatePayload {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : GameStatePayload.NONE;
}

gamestatepayload<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startMiniGamePayloadType(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addMinigame(builder:flatbuffers.Builder, minigameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, minigameOffset, 0);
}

static addGamestatetype(builder:flatbuffers.Builder, gamestatetype:GameStateType) {
  builder.addFieldInt8(1, gamestatetype, GameStateType.CrazyCountingHostEntities);
}

static addGamestatepayloadType(builder:flatbuffers.Builder, gamestatepayloadType:GameStatePayload) {
  builder.addFieldInt8(2, gamestatepayloadType, GameStatePayload.NONE);
}

static addGamestatepayload(builder:flatbuffers.Builder, gamestatepayloadOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, gamestatepayloadOffset, 0);
}

static endMiniGamePayloadType(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMiniGamePayloadType(builder:flatbuffers.Builder, minigameOffset:flatbuffers.Offset, gamestatetype:GameStateType, gamestatepayloadType:GameStatePayload, gamestatepayloadOffset:flatbuffers.Offset):flatbuffers.Offset {
  MiniGamePayloadType.startMiniGamePayloadType(builder);
  MiniGamePayloadType.addMinigame(builder, minigameOffset);
  MiniGamePayloadType.addGamestatetype(builder, gamestatetype);
  MiniGamePayloadType.addGamestatepayloadType(builder, gamestatepayloadType);
  MiniGamePayloadType.addGamestatepayload(builder, gamestatepayloadOffset);
  return MiniGamePayloadType.endMiniGamePayloadType(builder);
}
}
