// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers'

import { MessageType } from './message-type.js'
import { Payload, unionToPayload, unionListToPayload } from './payload.js'

export class Message {
  bb: flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.ByteBuffer): Message {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {
    return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  static getSizePrefixedRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  type(): MessageType {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset ? this.bb!.readInt8(this.bb_pos + offset) : MessageType.GameState
  }

  payloadType(): Payload {
    const offset = this.bb!.__offset(this.bb_pos, 6)
    return offset ? this.bb!.readUint8(this.bb_pos + offset) : Payload.NONE
  }

  payload<T extends flatbuffers.Table>(obj: any): any | null {
    const offset = this.bb!.__offset(this.bb_pos, 8)
    return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null
  }

  static startMessage(builder: flatbuffers.Builder) {
    builder.startObject(3)
  }

  static addType(builder: flatbuffers.Builder, type: MessageType) {
    builder.addFieldInt8(0, type, MessageType.GameState)
  }

  static addPayloadType(builder: flatbuffers.Builder, payloadType: Payload) {
    builder.addFieldInt8(1, payloadType, Payload.NONE)
  }

  static addPayload(builder: flatbuffers.Builder, payloadOffset: flatbuffers.Offset) {
    builder.addFieldOffset(2, payloadOffset, 0)
  }

  static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject()
    return offset
  }

  static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {
    builder.finish(offset)
  }

  static finishSizePrefixedMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {
    builder.finish(offset, undefined, true)
  }

  static createMessage(
    builder: flatbuffers.Builder,
    type: MessageType,
    payloadType: Payload,
    payloadOffset: flatbuffers.Offset
  ): flatbuffers.Offset {
    Message.startMessage(builder)
    Message.addType(builder, type)
    Message.addPayloadType(builder, payloadType)
    Message.addPayload(builder, payloadOffset)
    return Message.endMessage(builder)
  }
}
