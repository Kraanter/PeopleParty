// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers'

import { Shape } from './shape.js'

export class Object_ {
  bb: flatbuffers.ByteBuffer | null = null
  bb_pos = 0
  __init(i: number, bb: flatbuffers.ByteBuffer): Object_ {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsObject(bb: flatbuffers.ByteBuffer, obj?: Object_): Object_ {
    return (obj || new Object_()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  static getSizePrefixedRootAsObject(bb: flatbuffers.ByteBuffer, obj?: Object_): Object_ {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new Object_()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  shape(): Shape {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset ? this.bb!.readInt8(this.bb_pos + offset) : Shape.Circle
  }

  xPos(): number {
    const offset = this.bb!.__offset(this.bb_pos, 6)
    return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0
  }

  yPos(): number {
    const offset = this.bb!.__offset(this.bb_pos, 8)
    return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0
  }

  static startObject(builder: flatbuffers.Builder) {
    builder.startObject(3)
  }

  static addShape(builder: flatbuffers.Builder, shape: Shape) {
    builder.addFieldInt8(0, shape, Shape.Circle)
  }

  static addXPos(builder: flatbuffers.Builder, xPos: number) {
    builder.addFieldInt16(1, xPos, 0)
  }

  static addYPos(builder: flatbuffers.Builder, yPos: number) {
    builder.addFieldInt16(2, yPos, 0)
  }

  static endObject(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject()
    return offset
  }

  static createObject(
    builder: flatbuffers.Builder,
    shape: Shape,
    xPos: number,
    yPos: number
  ): flatbuffers.Offset {
    Object_.startObject(builder)
    Object_.addShape(builder, shape)
    Object_.addXPos(builder, xPos)
    Object_.addYPos(builder, yPos)
    return Object_.endObject(builder)
  }
}
