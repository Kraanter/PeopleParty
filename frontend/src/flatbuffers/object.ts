// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Shape } from './shape.js';


export class Object_ {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Object_ {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsObject(bb:flatbuffers.ByteBuffer, obj?:Object_):Object_ {
  return (obj || new Object_()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsObject(bb:flatbuffers.ByteBuffer, obj?:Object_):Object_ {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Object_()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

shape():Shape {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Shape.Circle;
}

xPos():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

yPos():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startObject(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addShape(builder:flatbuffers.Builder, shape:Shape) {
  builder.addFieldInt8(0, shape, Shape.Circle);
}

static addXPos(builder:flatbuffers.Builder, xPos:bigint) {
  builder.addFieldInt64(1, xPos, BigInt('0'));
}

static addYPos(builder:flatbuffers.Builder, yPos:bigint) {
  builder.addFieldInt64(2, yPos, BigInt('0'));
}

static endObject(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createObject(builder:flatbuffers.Builder, shape:Shape, xPos:bigint, yPos:bigint):flatbuffers.Offset {
  Object_.startObject(builder);
  Object_.addShape(builder, shape);
  Object_.addXPos(builder, xPos);
  Object_.addYPos(builder, yPos);
  return Object_.endObject(builder);
}
}
