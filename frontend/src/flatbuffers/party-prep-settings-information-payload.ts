// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FBMiniGameSetting } from './fbmini-game-setting.js';


export class PartyPrepSettingsInformationPayload {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PartyPrepSettingsInformationPayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPartyPrepSettingsInformationPayload(bb:flatbuffers.ByteBuffer, obj?:PartyPrepSettingsInformationPayload):PartyPrepSettingsInformationPayload {
  return (obj || new PartyPrepSettingsInformationPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPartyPrepSettingsInformationPayload(bb:flatbuffers.ByteBuffer, obj?:PartyPrepSettingsInformationPayload):PartyPrepSettingsInformationPayload {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PartyPrepSettingsInformationPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

numberOfRounds():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

minigames(index: number, obj?:FBMiniGameSetting):FBMiniGameSetting|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new FBMiniGameSetting()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

minigamesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startPartyPrepSettingsInformationPayload(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addNumberOfRounds(builder:flatbuffers.Builder, numberOfRounds:bigint) {
  builder.addFieldInt64(0, numberOfRounds, BigInt('0'));
}

static addMinigames(builder:flatbuffers.Builder, minigamesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, minigamesOffset, 0);
}

static createMinigamesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMinigamesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endPartyPrepSettingsInformationPayload(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPartyPrepSettingsInformationPayload(builder:flatbuffers.Builder, numberOfRounds:bigint, minigamesOffset:flatbuffers.Offset):flatbuffers.Offset {
  PartyPrepSettingsInformationPayload.startPartyPrepSettingsInformationPayload(builder);
  PartyPrepSettingsInformationPayload.addNumberOfRounds(builder, numberOfRounds);
  PartyPrepSettingsInformationPayload.addMinigames(builder, minigamesOffset);
  return PartyPrepSettingsInformationPayload.endPartyPrepSettingsInformationPayload(builder);
}
}
