// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class RightOnTimePayload {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RightOnTimePayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRightOnTimePayload(bb:flatbuffers.ByteBuffer, obj?:RightOnTimePayload):RightOnTimePayload {
  return (obj || new RightOnTimePayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRightOnTimePayload(bb:flatbuffers.ByteBuffer, obj?:RightOnTimePayload):RightOnTimePayload {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RightOnTimePayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

round():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

target():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

time():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

fadeOut():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

submitted(index: number):string
submitted(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
submitted(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

submittedLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startRightOnTimePayload(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addRound(builder:flatbuffers.Builder, round:number) {
  builder.addFieldInt16(0, round, 0);
}

static addTarget(builder:flatbuffers.Builder, target:number) {
  builder.addFieldInt16(1, target, 0);
}

static addTime(builder:flatbuffers.Builder, time:bigint) {
  builder.addFieldInt64(2, time, BigInt('0'));
}

static addFadeOut(builder:flatbuffers.Builder, fadeOut:boolean) {
  builder.addFieldInt8(3, +fadeOut, +false);
}

static addSubmitted(builder:flatbuffers.Builder, submittedOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, submittedOffset, 0);
}

static createSubmittedVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSubmittedVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endRightOnTimePayload(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRightOnTimePayload(builder:flatbuffers.Builder, round:number, target:number, time:bigint, fadeOut:boolean, submittedOffset:flatbuffers.Offset):flatbuffers.Offset {
  RightOnTimePayload.startRightOnTimePayload(builder);
  RightOnTimePayload.addRound(builder, round);
  RightOnTimePayload.addTarget(builder, target);
  RightOnTimePayload.addTime(builder, time);
  RightOnTimePayload.addFadeOut(builder, fadeOut);
  RightOnTimePayload.addSubmitted(builder, submittedOffset);
  return RightOnTimePayload.endRightOnTimePayload(builder);
}
}
