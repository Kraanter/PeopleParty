// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Input } from './input.js';


export class CrazyCountingPlayerInputPayload {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CrazyCountingPlayerInputPayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCrazyCountingPlayerInputPayload(bb:flatbuffers.ByteBuffer, obj?:CrazyCountingPlayerInputPayload):CrazyCountingPlayerInputPayload {
  return (obj || new CrazyCountingPlayerInputPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCrazyCountingPlayerInputPayload(bb:flatbuffers.ByteBuffer, obj?:CrazyCountingPlayerInputPayload):CrazyCountingPlayerInputPayload {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CrazyCountingPlayerInputPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

inputType():Input {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Input.Increase;
}

static startCrazyCountingPlayerInputPayload(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addInputType(builder:flatbuffers.Builder, inputType:Input) {
  builder.addFieldInt8(0, inputType, Input.Increase);
}

static endCrazyCountingPlayerInputPayload(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCrazyCountingPlayerInputPayload(builder:flatbuffers.Builder, inputType:Input):flatbuffers.Offset {
  CrazyCountingPlayerInputPayload.startCrazyCountingPlayerInputPayload(builder);
  CrazyCountingPlayerInputPayload.addInputType(builder, inputType);
  return CrazyCountingPlayerInputPayload.endCrazyCountingPlayerInputPayload(builder);
}
}
