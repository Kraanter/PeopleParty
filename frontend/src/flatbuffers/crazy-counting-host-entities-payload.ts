// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FBCrazyCountingEntity } from './fbcrazy-counting-entity.js';


export class CrazyCountingHostEntitiesPayload {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CrazyCountingHostEntitiesPayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCrazyCountingHostEntitiesPayload(bb:flatbuffers.ByteBuffer, obj?:CrazyCountingHostEntitiesPayload):CrazyCountingHostEntitiesPayload {
  return (obj || new CrazyCountingHostEntitiesPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCrazyCountingHostEntitiesPayload(bb:flatbuffers.ByteBuffer, obj?:CrazyCountingHostEntitiesPayload):CrazyCountingHostEntitiesPayload {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CrazyCountingHostEntitiesPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

timeLeft():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

entities(index: number, obj?:FBCrazyCountingEntity):FBCrazyCountingEntity|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new FBCrazyCountingEntity()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

entitiesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

submitted(index: number):string
submitted(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
submitted(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

submittedLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startCrazyCountingHostEntitiesPayload(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addTimeLeft(builder:flatbuffers.Builder, timeLeft:bigint) {
  builder.addFieldInt64(0, timeLeft, BigInt('0'));
}

static addEntities(builder:flatbuffers.Builder, entitiesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, entitiesOffset, 0);
}

static createEntitiesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEntitiesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSubmitted(builder:flatbuffers.Builder, submittedOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, submittedOffset, 0);
}

static createSubmittedVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSubmittedVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endCrazyCountingHostEntitiesPayload(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCrazyCountingHostEntitiesPayload(builder:flatbuffers.Builder, timeLeft:bigint, entitiesOffset:flatbuffers.Offset, submittedOffset:flatbuffers.Offset):flatbuffers.Offset {
  CrazyCountingHostEntitiesPayload.startCrazyCountingHostEntitiesPayload(builder);
  CrazyCountingHostEntitiesPayload.addTimeLeft(builder, timeLeft);
  CrazyCountingHostEntitiesPayload.addEntities(builder, entitiesOffset);
  CrazyCountingHostEntitiesPayload.addSubmitted(builder, submittedOffset);
  return CrazyCountingHostEntitiesPayload.endCrazyCountingHostEntitiesPayload(builder);
}
}
