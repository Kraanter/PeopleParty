// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class RightOnTimeHostPayload {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RightOnTimeHostPayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRightOnTimeHostPayload(bb:flatbuffers.ByteBuffer, obj?:RightOnTimeHostPayload):RightOnTimeHostPayload {
  return (obj || new RightOnTimeHostPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRightOnTimeHostPayload(bb:flatbuffers.ByteBuffer, obj?:RightOnTimeHostPayload):RightOnTimeHostPayload {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RightOnTimeHostPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

round():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

time():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

fadeOut():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startRightOnTimeHostPayload(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addRound(builder:flatbuffers.Builder, round:number) {
  builder.addFieldInt16(0, round, 0);
}

static addTime(builder:flatbuffers.Builder, time:bigint) {
  builder.addFieldInt64(1, time, BigInt('0'));
}

static addFadeOut(builder:flatbuffers.Builder, fadeOut:boolean) {
  builder.addFieldInt8(2, +fadeOut, +false);
}

static endRightOnTimeHostPayload(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRightOnTimeHostPayload(builder:flatbuffers.Builder, round:number, time:bigint, fadeOut:boolean):flatbuffers.Offset {
  RightOnTimeHostPayload.startRightOnTimeHostPayload(builder);
  RightOnTimeHostPayload.addRound(builder, round);
  RightOnTimeHostPayload.addTime(builder, time);
  RightOnTimeHostPayload.addFadeOut(builder, fadeOut);
  return RightOnTimeHostPayload.endRightOnTimeHostPayload(builder);
}
}
