// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class BusinessBailoutPlayerPayload {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BusinessBailoutPlayerPayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBusinessBailoutPlayerPayload(bb:flatbuffers.ByteBuffer, obj?:BusinessBailoutPlayerPayload):BusinessBailoutPlayerPayload {
  return (obj || new BusinessBailoutPlayerPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBusinessBailoutPlayerPayload(bb:flatbuffers.ByteBuffer, obj?:BusinessBailoutPlayerPayload):BusinessBailoutPlayerPayload {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BusinessBailoutPlayerPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

value():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

locked():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startBusinessBailoutPlayerPayload(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addValue(builder:flatbuffers.Builder, value:number) {
  builder.addFieldInt32(0, value, 0);
}

static addLocked(builder:flatbuffers.Builder, locked:boolean) {
  builder.addFieldInt8(1, +locked, +false);
}

static endBusinessBailoutPlayerPayload(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createBusinessBailoutPlayerPayload(builder:flatbuffers.Builder, value:number, locked:boolean):flatbuffers.Offset {
  BusinessBailoutPlayerPayload.startBusinessBailoutPlayerPayload(builder);
  BusinessBailoutPlayerPayload.addValue(builder, value);
  BusinessBailoutPlayerPayload.addLocked(builder, locked);
  return BusinessBailoutPlayerPayload.endBusinessBailoutPlayerPayload(builder);
}
}
