// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { BusinessBailoutHostPayload } from './business-bailout-host-payload.js';
import { BusinessBailoutPlayerInputPayload } from './business-bailout-player-input-payload.js';
import { BusinessBailoutPlayerPayload } from './business-bailout-player-payload.js';
import { BusinessBailoutResultPayload } from './business-bailout-result-payload.js';
import { CrazyCountingHostEntitiesPayload } from './crazy-counting-host-entities-payload.js';
import { CrazyCountingPlayerInputPayload } from './crazy-counting-player-input-payload.js';
import { CrazyCountingPlayerUpdatePayload } from './crazy-counting-player-update-payload.js';
import { CrazyCountingResultPayload } from './crazy-counting-result-payload.js';
import { LaunchPartyLightsPayload } from './launch-party-lights-payload.js';
import { LaunchPartyPlayerInputPayload } from './launch-party-player-input-payload.js';
import { LaunchPartyPlayerTimePayload } from './launch-party-player-time-payload.js';
import { LaunchPartyResultPayload } from './launch-party-result-payload.js';
import { MemoryMixerGridPayload } from './memory-mixer-grid-payload.js';
import { MemoryMixerPlayerInputPayload } from './memory-mixer-player-input-payload.js';
import { MemoryMixerPlayerSubmittedPayload } from './memory-mixer-player-submitted-payload.js';
import { MemoryMixerResultPayload } from './memory-mixer-result-payload.js';
import { MemoryMixerRoundResultPayload } from './memory-mixer-round-result-payload.js';
import { MiniGameIntroductionPayload } from './mini-game-introduction-payload.js';
import { RPSBracketHostPayload } from './rpsbracket-host-payload.js';
import { RPSBracketPlayerInputPayload } from './rpsbracket-player-input-payload.js';
import { RPSBracketPlayerPayload } from './rpsbracket-player-payload.js';


export enum GameStatePayload {
  NONE = 0,
  BusinessBailoutHostPayload = 1,
  BusinessBailoutPlayerInputPayload = 2,
  BusinessBailoutPlayerPayload = 3,
  BusinessBailoutResultPayload = 4,
  CrazyCountingHostEntitiesPayload = 5,
  CrazyCountingPlayerInputPayload = 6,
  CrazyCountingPlayerUpdatePayload = 7,
  CrazyCountingResultPayload = 8,
  LaunchPartyLightsPayload = 9,
  LaunchPartyPlayerInputPayload = 10,
  LaunchPartyPlayerTimePayload = 11,
  LaunchPartyResultPayload = 12,
  MemoryMixerGridPayload = 13,
  MemoryMixerPlayerInputPayload = 14,
  MemoryMixerPlayerSubmittedPayload = 15,
  MemoryMixerResultPayload = 16,
  MemoryMixerRoundResultPayload = 17,
  MiniGameIntroductionPayload = 18,
  RPSBracketHostPayload = 19,
  RPSBracketPlayerInputPayload = 20,
  RPSBracketPlayerPayload = 21
}

export function unionToGameStatePayload(
  type: GameStatePayload,
  accessor: (obj:BusinessBailoutHostPayload|BusinessBailoutPlayerInputPayload|BusinessBailoutPlayerPayload|BusinessBailoutResultPayload|CrazyCountingHostEntitiesPayload|CrazyCountingPlayerInputPayload|CrazyCountingPlayerUpdatePayload|CrazyCountingResultPayload|LaunchPartyLightsPayload|LaunchPartyPlayerInputPayload|LaunchPartyPlayerTimePayload|LaunchPartyResultPayload|MemoryMixerGridPayload|MemoryMixerPlayerInputPayload|MemoryMixerPlayerSubmittedPayload|MemoryMixerResultPayload|MemoryMixerRoundResultPayload|MiniGameIntroductionPayload|RPSBracketHostPayload|RPSBracketPlayerInputPayload|RPSBracketPlayerPayload) => BusinessBailoutHostPayload|BusinessBailoutPlayerInputPayload|BusinessBailoutPlayerPayload|BusinessBailoutResultPayload|CrazyCountingHostEntitiesPayload|CrazyCountingPlayerInputPayload|CrazyCountingPlayerUpdatePayload|CrazyCountingResultPayload|LaunchPartyLightsPayload|LaunchPartyPlayerInputPayload|LaunchPartyPlayerTimePayload|LaunchPartyResultPayload|MemoryMixerGridPayload|MemoryMixerPlayerInputPayload|MemoryMixerPlayerSubmittedPayload|MemoryMixerResultPayload|MemoryMixerRoundResultPayload|MiniGameIntroductionPayload|RPSBracketHostPayload|RPSBracketPlayerInputPayload|RPSBracketPlayerPayload|null
): BusinessBailoutHostPayload|BusinessBailoutPlayerInputPayload|BusinessBailoutPlayerPayload|BusinessBailoutResultPayload|CrazyCountingHostEntitiesPayload|CrazyCountingPlayerInputPayload|CrazyCountingPlayerUpdatePayload|CrazyCountingResultPayload|LaunchPartyLightsPayload|LaunchPartyPlayerInputPayload|LaunchPartyPlayerTimePayload|LaunchPartyResultPayload|MemoryMixerGridPayload|MemoryMixerPlayerInputPayload|MemoryMixerPlayerSubmittedPayload|MemoryMixerResultPayload|MemoryMixerRoundResultPayload|MiniGameIntroductionPayload|RPSBracketHostPayload|RPSBracketPlayerInputPayload|RPSBracketPlayerPayload|null {
  switch(GameStatePayload[type]) {
    case 'NONE': return null; 
    case 'BusinessBailoutHostPayload': return accessor(new BusinessBailoutHostPayload())! as BusinessBailoutHostPayload;
    case 'BusinessBailoutPlayerInputPayload': return accessor(new BusinessBailoutPlayerInputPayload())! as BusinessBailoutPlayerInputPayload;
    case 'BusinessBailoutPlayerPayload': return accessor(new BusinessBailoutPlayerPayload())! as BusinessBailoutPlayerPayload;
    case 'BusinessBailoutResultPayload': return accessor(new BusinessBailoutResultPayload())! as BusinessBailoutResultPayload;
    case 'CrazyCountingHostEntitiesPayload': return accessor(new CrazyCountingHostEntitiesPayload())! as CrazyCountingHostEntitiesPayload;
    case 'CrazyCountingPlayerInputPayload': return accessor(new CrazyCountingPlayerInputPayload())! as CrazyCountingPlayerInputPayload;
    case 'CrazyCountingPlayerUpdatePayload': return accessor(new CrazyCountingPlayerUpdatePayload())! as CrazyCountingPlayerUpdatePayload;
    case 'CrazyCountingResultPayload': return accessor(new CrazyCountingResultPayload())! as CrazyCountingResultPayload;
    case 'LaunchPartyLightsPayload': return accessor(new LaunchPartyLightsPayload())! as LaunchPartyLightsPayload;
    case 'LaunchPartyPlayerInputPayload': return accessor(new LaunchPartyPlayerInputPayload())! as LaunchPartyPlayerInputPayload;
    case 'LaunchPartyPlayerTimePayload': return accessor(new LaunchPartyPlayerTimePayload())! as LaunchPartyPlayerTimePayload;
    case 'LaunchPartyResultPayload': return accessor(new LaunchPartyResultPayload())! as LaunchPartyResultPayload;
    case 'MemoryMixerGridPayload': return accessor(new MemoryMixerGridPayload())! as MemoryMixerGridPayload;
    case 'MemoryMixerPlayerInputPayload': return accessor(new MemoryMixerPlayerInputPayload())! as MemoryMixerPlayerInputPayload;
    case 'MemoryMixerPlayerSubmittedPayload': return accessor(new MemoryMixerPlayerSubmittedPayload())! as MemoryMixerPlayerSubmittedPayload;
    case 'MemoryMixerResultPayload': return accessor(new MemoryMixerResultPayload())! as MemoryMixerResultPayload;
    case 'MemoryMixerRoundResultPayload': return accessor(new MemoryMixerRoundResultPayload())! as MemoryMixerRoundResultPayload;
    case 'MiniGameIntroductionPayload': return accessor(new MiniGameIntroductionPayload())! as MiniGameIntroductionPayload;
    case 'RPSBracketHostPayload': return accessor(new RPSBracketHostPayload())! as RPSBracketHostPayload;
    case 'RPSBracketPlayerInputPayload': return accessor(new RPSBracketPlayerInputPayload())! as RPSBracketPlayerInputPayload;
    case 'RPSBracketPlayerPayload': return accessor(new RPSBracketPlayerPayload())! as RPSBracketPlayerPayload;
    default: return null;
  }
}

export function unionListToGameStatePayload(
  type: GameStatePayload, 
  accessor: (index: number, obj:BusinessBailoutHostPayload|BusinessBailoutPlayerInputPayload|BusinessBailoutPlayerPayload|BusinessBailoutResultPayload|CrazyCountingHostEntitiesPayload|CrazyCountingPlayerInputPayload|CrazyCountingPlayerUpdatePayload|CrazyCountingResultPayload|LaunchPartyLightsPayload|LaunchPartyPlayerInputPayload|LaunchPartyPlayerTimePayload|LaunchPartyResultPayload|MemoryMixerGridPayload|MemoryMixerPlayerInputPayload|MemoryMixerPlayerSubmittedPayload|MemoryMixerResultPayload|MemoryMixerRoundResultPayload|MiniGameIntroductionPayload|RPSBracketHostPayload|RPSBracketPlayerInputPayload|RPSBracketPlayerPayload) => BusinessBailoutHostPayload|BusinessBailoutPlayerInputPayload|BusinessBailoutPlayerPayload|BusinessBailoutResultPayload|CrazyCountingHostEntitiesPayload|CrazyCountingPlayerInputPayload|CrazyCountingPlayerUpdatePayload|CrazyCountingResultPayload|LaunchPartyLightsPayload|LaunchPartyPlayerInputPayload|LaunchPartyPlayerTimePayload|LaunchPartyResultPayload|MemoryMixerGridPayload|MemoryMixerPlayerInputPayload|MemoryMixerPlayerSubmittedPayload|MemoryMixerResultPayload|MemoryMixerRoundResultPayload|MiniGameIntroductionPayload|RPSBracketHostPayload|RPSBracketPlayerInputPayload|RPSBracketPlayerPayload|null, 
  index: number
): BusinessBailoutHostPayload|BusinessBailoutPlayerInputPayload|BusinessBailoutPlayerPayload|BusinessBailoutResultPayload|CrazyCountingHostEntitiesPayload|CrazyCountingPlayerInputPayload|CrazyCountingPlayerUpdatePayload|CrazyCountingResultPayload|LaunchPartyLightsPayload|LaunchPartyPlayerInputPayload|LaunchPartyPlayerTimePayload|LaunchPartyResultPayload|MemoryMixerGridPayload|MemoryMixerPlayerInputPayload|MemoryMixerPlayerSubmittedPayload|MemoryMixerResultPayload|MemoryMixerRoundResultPayload|MiniGameIntroductionPayload|RPSBracketHostPayload|RPSBracketPlayerInputPayload|RPSBracketPlayerPayload|null {
  switch(GameStatePayload[type]) {
    case 'NONE': return null; 
    case 'BusinessBailoutHostPayload': return accessor(index, new BusinessBailoutHostPayload())! as BusinessBailoutHostPayload;
    case 'BusinessBailoutPlayerInputPayload': return accessor(index, new BusinessBailoutPlayerInputPayload())! as BusinessBailoutPlayerInputPayload;
    case 'BusinessBailoutPlayerPayload': return accessor(index, new BusinessBailoutPlayerPayload())! as BusinessBailoutPlayerPayload;
    case 'BusinessBailoutResultPayload': return accessor(index, new BusinessBailoutResultPayload())! as BusinessBailoutResultPayload;
    case 'CrazyCountingHostEntitiesPayload': return accessor(index, new CrazyCountingHostEntitiesPayload())! as CrazyCountingHostEntitiesPayload;
    case 'CrazyCountingPlayerInputPayload': return accessor(index, new CrazyCountingPlayerInputPayload())! as CrazyCountingPlayerInputPayload;
    case 'CrazyCountingPlayerUpdatePayload': return accessor(index, new CrazyCountingPlayerUpdatePayload())! as CrazyCountingPlayerUpdatePayload;
    case 'CrazyCountingResultPayload': return accessor(index, new CrazyCountingResultPayload())! as CrazyCountingResultPayload;
    case 'LaunchPartyLightsPayload': return accessor(index, new LaunchPartyLightsPayload())! as LaunchPartyLightsPayload;
    case 'LaunchPartyPlayerInputPayload': return accessor(index, new LaunchPartyPlayerInputPayload())! as LaunchPartyPlayerInputPayload;
    case 'LaunchPartyPlayerTimePayload': return accessor(index, new LaunchPartyPlayerTimePayload())! as LaunchPartyPlayerTimePayload;
    case 'LaunchPartyResultPayload': return accessor(index, new LaunchPartyResultPayload())! as LaunchPartyResultPayload;
    case 'MemoryMixerGridPayload': return accessor(index, new MemoryMixerGridPayload())! as MemoryMixerGridPayload;
    case 'MemoryMixerPlayerInputPayload': return accessor(index, new MemoryMixerPlayerInputPayload())! as MemoryMixerPlayerInputPayload;
    case 'MemoryMixerPlayerSubmittedPayload': return accessor(index, new MemoryMixerPlayerSubmittedPayload())! as MemoryMixerPlayerSubmittedPayload;
    case 'MemoryMixerResultPayload': return accessor(index, new MemoryMixerResultPayload())! as MemoryMixerResultPayload;
    case 'MemoryMixerRoundResultPayload': return accessor(index, new MemoryMixerRoundResultPayload())! as MemoryMixerRoundResultPayload;
    case 'MiniGameIntroductionPayload': return accessor(index, new MiniGameIntroductionPayload())! as MiniGameIntroductionPayload;
    case 'RPSBracketHostPayload': return accessor(index, new RPSBracketHostPayload())! as RPSBracketHostPayload;
    case 'RPSBracketPlayerInputPayload': return accessor(index, new RPSBracketPlayerInputPayload())! as RPSBracketPlayerInputPayload;
    case 'RPSBracketPlayerPayload': return accessor(index, new RPSBracketPlayerPayload())! as RPSBracketPlayerPayload;
    default: return null;
  }
}
