// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { PlayerBailout } from './player-bailout.js';


export class BusinessBailoutHostPayload {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BusinessBailoutHostPayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBusinessBailoutHostPayload(bb:flatbuffers.ByteBuffer, obj?:BusinessBailoutHostPayload):BusinessBailoutHostPayload {
  return (obj || new BusinessBailoutHostPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBusinessBailoutHostPayload(bb:flatbuffers.ByteBuffer, obj?:BusinessBailoutHostPayload):BusinessBailoutHostPayload {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BusinessBailoutHostPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

value():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

time():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

bailedPlayers(index: number, obj?:PlayerBailout):PlayerBailout|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new PlayerBailout()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

bailedPlayersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startBusinessBailoutHostPayload(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addValue(builder:flatbuffers.Builder, value:number) {
  builder.addFieldInt32(0, value, 0);
}

static addTime(builder:flatbuffers.Builder, time:number) {
  builder.addFieldInt32(1, time, 0);
}

static addBailedPlayers(builder:flatbuffers.Builder, bailedPlayersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, bailedPlayersOffset, 0);
}

static createBailedPlayersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBailedPlayersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endBusinessBailoutHostPayload(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createBusinessBailoutHostPayload(builder:flatbuffers.Builder, value:number, time:number, bailedPlayersOffset:flatbuffers.Offset):flatbuffers.Offset {
  BusinessBailoutHostPayload.startBusinessBailoutHostPayload(builder);
  BusinessBailoutHostPayload.addValue(builder, value);
  BusinessBailoutHostPayload.addTime(builder, time);
  BusinessBailoutHostPayload.addBailedPlayers(builder, bailedPlayersOffset);
  return BusinessBailoutHostPayload.endBusinessBailoutHostPayload(builder);
}
}
