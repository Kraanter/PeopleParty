// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class FBRightOnTimeResultPair {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FBRightOnTimeResultPair {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFBRightOnTimeResultPair(bb:flatbuffers.ByteBuffer, obj?:FBRightOnTimeResultPair):FBRightOnTimeResultPair {
  return (obj || new FBRightOnTimeResultPair()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFBRightOnTimeResultPair(bb:flatbuffers.ByteBuffer, obj?:FBRightOnTimeResultPair):FBRightOnTimeResultPair {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FBRightOnTimeResultPair()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

roundOneDiff():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

roundTwoDiff():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

roundThreeDiff():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

averageDiffTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

static startFBRightOnTimeResultPair(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addRoundOneDiff(builder:flatbuffers.Builder, roundOneDiff:bigint) {
  builder.addFieldInt64(1, roundOneDiff, BigInt('0'));
}

static addRoundTwoDiff(builder:flatbuffers.Builder, roundTwoDiff:bigint) {
  builder.addFieldInt64(2, roundTwoDiff, BigInt('0'));
}

static addRoundThreeDiff(builder:flatbuffers.Builder, roundThreeDiff:bigint) {
  builder.addFieldInt64(3, roundThreeDiff, BigInt('0'));
}

static addAverageDiffTime(builder:flatbuffers.Builder, averageDiffTime:bigint) {
  builder.addFieldInt64(4, averageDiffTime, BigInt('0'));
}

static endFBRightOnTimeResultPair(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFBRightOnTimeResultPair(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, roundOneDiff:bigint, roundTwoDiff:bigint, roundThreeDiff:bigint, averageDiffTime:bigint):flatbuffers.Offset {
  FBRightOnTimeResultPair.startFBRightOnTimeResultPair(builder);
  FBRightOnTimeResultPair.addName(builder, nameOffset);
  FBRightOnTimeResultPair.addRoundOneDiff(builder, roundOneDiff);
  FBRightOnTimeResultPair.addRoundTwoDiff(builder, roundTwoDiff);
  FBRightOnTimeResultPair.addRoundThreeDiff(builder, roundThreeDiff);
  FBRightOnTimeResultPair.addAverageDiffTime(builder, averageDiffTime);
  return FBRightOnTimeResultPair.endFBRightOnTimeResultPair(builder);
}
}
