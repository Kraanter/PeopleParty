// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FBRightOnTimeRoundResultPair } from './fbright-on-time-round-result-pair.js';


export class RightOnTimeRoundResultPayload {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RightOnTimeRoundResultPayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRightOnTimeRoundResultPayload(bb:flatbuffers.ByteBuffer, obj?:RightOnTimeRoundResultPayload):RightOnTimeRoundResultPayload {
  return (obj || new RightOnTimeRoundResultPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRightOnTimeRoundResultPayload(bb:flatbuffers.ByteBuffer, obj?:RightOnTimeRoundResultPayload):RightOnTimeRoundResultPayload {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RightOnTimeRoundResultPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

round():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

target():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

results(index: number, obj?:FBRightOnTimeRoundResultPair):FBRightOnTimeRoundResultPair|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new FBRightOnTimeRoundResultPair()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

resultsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startRightOnTimeRoundResultPayload(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addRound(builder:flatbuffers.Builder, round:number) {
  builder.addFieldInt16(0, round, 0);
}

static addTarget(builder:flatbuffers.Builder, target:number) {
  builder.addFieldInt16(1, target, 0);
}

static addResults(builder:flatbuffers.Builder, resultsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, resultsOffset, 0);
}

static createResultsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startResultsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endRightOnTimeRoundResultPayload(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRightOnTimeRoundResultPayload(builder:flatbuffers.Builder, round:number, target:number, resultsOffset:flatbuffers.Offset):flatbuffers.Offset {
  RightOnTimeRoundResultPayload.startRightOnTimeRoundResultPayload(builder);
  RightOnTimeRoundResultPayload.addRound(builder, round);
  RightOnTimeRoundResultPayload.addTarget(builder, target);
  RightOnTimeRoundResultPayload.addResults(builder, resultsOffset);
  return RightOnTimeRoundResultPayload.endRightOnTimeRoundResultPayload(builder);
}
}
