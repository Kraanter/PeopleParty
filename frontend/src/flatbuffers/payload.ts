// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { HostPayloadType } from './host-payload-type.js';
import { JoinPayloadType } from './join-payload-type.js';
import { LeaderboardPayloadType } from './leaderboard-payload-type.js';
import { MiniGamePayloadType } from './mini-game-payload-type.js';
import { PartyPrepPayloadType } from './party-prep-payload-type.js';


export enum Payload {
  NONE = 0,
  HostPayloadType = 1,
  JoinPayloadType = 2,
  LeaderboardPayloadType = 3,
  MiniGamePayloadType = 4,
  PartyPrepPayloadType = 5
}

export function unionToPayload(
  type: Payload,
  accessor: (obj:HostPayloadType|JoinPayloadType|LeaderboardPayloadType|MiniGamePayloadType|PartyPrepPayloadType) => HostPayloadType|JoinPayloadType|LeaderboardPayloadType|MiniGamePayloadType|PartyPrepPayloadType|null
): HostPayloadType|JoinPayloadType|LeaderboardPayloadType|MiniGamePayloadType|PartyPrepPayloadType|null {
  switch(Payload[type]) {
    case 'NONE': return null; 
    case 'HostPayloadType': return accessor(new HostPayloadType())! as HostPayloadType;
    case 'JoinPayloadType': return accessor(new JoinPayloadType())! as JoinPayloadType;
    case 'LeaderboardPayloadType': return accessor(new LeaderboardPayloadType())! as LeaderboardPayloadType;
    case 'MiniGamePayloadType': return accessor(new MiniGamePayloadType())! as MiniGamePayloadType;
    case 'PartyPrepPayloadType': return accessor(new PartyPrepPayloadType())! as PartyPrepPayloadType;
    default: return null;
  }
}

export function unionListToPayload(
  type: Payload, 
  accessor: (index: number, obj:HostPayloadType|JoinPayloadType|LeaderboardPayloadType|MiniGamePayloadType|PartyPrepPayloadType) => HostPayloadType|JoinPayloadType|LeaderboardPayloadType|MiniGamePayloadType|PartyPrepPayloadType|null, 
  index: number
): HostPayloadType|JoinPayloadType|LeaderboardPayloadType|MiniGamePayloadType|PartyPrepPayloadType|null {
  switch(Payload[type]) {
    case 'NONE': return null; 
    case 'HostPayloadType': return accessor(index, new HostPayloadType())! as HostPayloadType;
    case 'JoinPayloadType': return accessor(index, new JoinPayloadType())! as JoinPayloadType;
    case 'LeaderboardPayloadType': return accessor(index, new LeaderboardPayloadType())! as LeaderboardPayloadType;
    case 'MiniGamePayloadType': return accessor(index, new MiniGamePayloadType())! as MiniGamePayloadType;
    case 'PartyPrepPayloadType': return accessor(index, new PartyPrepPayloadType())! as PartyPrepPayloadType;
    default: return null;
  }
}
