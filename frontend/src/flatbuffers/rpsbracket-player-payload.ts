// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { RPSChoice } from './rpschoice.js';


export class RPSBracketPlayerPayload {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RPSBracketPlayerPayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRPSBracketPlayerPayload(bb:flatbuffers.ByteBuffer, obj?:RPSBracketPlayerPayload):RPSBracketPlayerPayload {
  return (obj || new RPSBracketPlayerPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRPSBracketPlayerPayload(bb:flatbuffers.ByteBuffer, obj?:RPSBracketPlayerPayload):RPSBracketPlayerPayload {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RPSBracketPlayerPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

choice():RPSChoice {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : RPSChoice.ROCK;
}

remainingTime():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startRPSBracketPlayerPayload(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addChoice(builder:flatbuffers.Builder, choice:RPSChoice) {
  builder.addFieldInt8(0, choice, RPSChoice.ROCK);
}

static addRemainingTime(builder:flatbuffers.Builder, remainingTime:number) {
  builder.addFieldInt32(1, remainingTime, 0);
}

static endRPSBracketPlayerPayload(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRPSBracketPlayerPayload(builder:flatbuffers.Builder, choice:RPSChoice, remainingTime:number):flatbuffers.Offset {
  RPSBracketPlayerPayload.startRPSBracketPlayerPayload(builder);
  RPSBracketPlayerPayload.addChoice(builder, choice);
  RPSBracketPlayerPayload.addRemainingTime(builder, remainingTime);
  return RPSBracketPlayerPayload.endRPSBracketPlayerPayload(builder);
}
}
