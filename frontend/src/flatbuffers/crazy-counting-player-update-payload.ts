// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class CrazyCountingPlayerUpdatePayload {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CrazyCountingPlayerUpdatePayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCrazyCountingPlayerUpdatePayload(bb:flatbuffers.ByteBuffer, obj?:CrazyCountingPlayerUpdatePayload):CrazyCountingPlayerUpdatePayload {
  return (obj || new CrazyCountingPlayerUpdatePayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCrazyCountingPlayerUpdatePayload(bb:flatbuffers.ByteBuffer, obj?:CrazyCountingPlayerUpdatePayload):CrazyCountingPlayerUpdatePayload {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CrazyCountingPlayerUpdatePayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

newInt():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

timeLeft():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

submitted():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startCrazyCountingPlayerUpdatePayload(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addNewInt(builder:flatbuffers.Builder, newInt:number) {
  builder.addFieldInt16(0, newInt, 0);
}

static addTimeLeft(builder:flatbuffers.Builder, timeLeft:bigint) {
  builder.addFieldInt64(1, timeLeft, BigInt('0'));
}

static addSubmitted(builder:flatbuffers.Builder, submitted:boolean) {
  builder.addFieldInt8(2, +submitted, +false);
}

static endCrazyCountingPlayerUpdatePayload(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCrazyCountingPlayerUpdatePayload(builder:flatbuffers.Builder, newInt:number, timeLeft:bigint, submitted:boolean):flatbuffers.Offset {
  CrazyCountingPlayerUpdatePayload.startCrazyCountingPlayerUpdatePayload(builder);
  CrazyCountingPlayerUpdatePayload.addNewInt(builder, newInt);
  CrazyCountingPlayerUpdatePayload.addTimeLeft(builder, timeLeft);
  CrazyCountingPlayerUpdatePayload.addSubmitted(builder, submitted);
  return CrazyCountingPlayerUpdatePayload.endCrazyCountingPlayerUpdatePayload(builder);
}
}
