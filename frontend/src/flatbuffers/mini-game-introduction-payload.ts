// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class MiniGameIntroductionPayload {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MiniGameIntroductionPayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMiniGameIntroductionPayload(bb:flatbuffers.ByteBuffer, obj?:MiniGameIntroductionPayload):MiniGameIntroductionPayload {
  return (obj || new MiniGameIntroductionPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMiniGameIntroductionPayload(bb:flatbuffers.ByteBuffer, obj?:MiniGameIntroductionPayload):MiniGameIntroductionPayload {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MiniGameIntroductionPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

instruction():string|null
instruction(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
instruction(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

timeLeft():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

static startMiniGameIntroductionPayload(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addInstruction(builder:flatbuffers.Builder, instructionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, instructionOffset, 0);
}

static addTimeLeft(builder:flatbuffers.Builder, timeLeft:bigint) {
  builder.addFieldInt64(2, timeLeft, BigInt('0'));
}

static endMiniGameIntroductionPayload(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMiniGameIntroductionPayload(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, instructionOffset:flatbuffers.Offset, timeLeft:bigint):flatbuffers.Offset {
  MiniGameIntroductionPayload.startMiniGameIntroductionPayload(builder);
  MiniGameIntroductionPayload.addName(builder, nameOffset);
  MiniGameIntroductionPayload.addInstruction(builder, instructionOffset);
  MiniGameIntroductionPayload.addTimeLeft(builder, timeLeft);
  return MiniGameIntroductionPayload.endMiniGameIntroductionPayload(builder);
}
}
