// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Object_ } from './object.js';


export class CountingGameState {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):CountingGameState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCountingGameState(bb:flatbuffers.ByteBuffer, obj?:CountingGameState):CountingGameState {
  return (obj || new CountingGameState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCountingGameState(bb:flatbuffers.ByteBuffer, obj?:CountingGameState):CountingGameState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CountingGameState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

objects(index: number, obj?:Object_):Object_|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Object_()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

objectsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startCountingGameState(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addObjects(builder:flatbuffers.Builder, objectsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, objectsOffset, 0);
}

static createObjectsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startObjectsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endCountingGameState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCountingGameState(builder:flatbuffers.Builder, objectsOffset:flatbuffers.Offset):flatbuffers.Offset {
  CountingGameState.startCountingGameState(builder);
  CountingGameState.addObjects(builder, objectsOffset);
  return CountingGameState.endCountingGameState(builder);
}
}
