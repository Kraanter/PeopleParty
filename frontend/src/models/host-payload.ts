// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class HostPayload {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):HostPayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsHostPayload(bb:flatbuffers.ByteBuffer, obj?:HostPayload):HostPayload {
  return (obj || new HostPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsHostPayload(bb:flatbuffers.ByteBuffer, obj?:HostPayload):HostPayload {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new HostPayload()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

roomId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

static startHostPayload(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addRoomId(builder:flatbuffers.Builder, roomId:number) {
  builder.addFieldInt16(0, roomId, 0);
}

static endHostPayload(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createHostPayload(builder:flatbuffers.Builder, roomId:number):flatbuffers.Offset {
  HostPayload.startHostPayload(builder);
  HostPayload.addRoomId(builder, roomId);
  return HostPayload.endHostPayload(builder);
}
}
