// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { GameStatePayload } from './game-state-payload.js';
import { HostPayload } from './host-payload.js';
import { JoinPayload } from './join-payload.js';


export enum Payload {
  NONE = 0,
  HostPayload = 1,
  JoinPayload = 2,
  GameStatePayload = 3
}

export function unionToPayload(
  type: Payload,
  accessor: (obj:GameStatePayload|HostPayload|JoinPayload) => GameStatePayload|HostPayload|JoinPayload|null
): GameStatePayload|HostPayload|JoinPayload|null {
  switch(Payload[type]) {
    case 'NONE': return null;
    case 'HostPayload': return accessor(new HostPayload())! as HostPayload;
    case 'JoinPayload': return accessor(new JoinPayload())! as JoinPayload;
    case 'GameStatePayload': return accessor(new GameStatePayload())! as GameStatePayload;
    default: return null;
  }
}

export function unionListToPayload(
  type: Payload,
  accessor: (index: number, obj:GameStatePayload|HostPayload|JoinPayload) => GameStatePayload|HostPayload|JoinPayload|null,
  index: number
): GameStatePayload|HostPayload|JoinPayload|null {
  switch(Payload[type]) {
    case 'NONE': return null;
    case 'HostPayload': return accessor(index, new HostPayload())! as HostPayload;
    case 'JoinPayload': return accessor(index, new JoinPayload())! as JoinPayload;
    case 'GameStatePayload': return accessor(index, new GameStatePayload())! as GameStatePayload;
    default: return null;
  }
}
