// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_MESSAGECLASS_H_
#define FLATBUFFERS_GENERATED_MESSAGECLASS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
                  FLATBUFFERS_VERSION_MINOR == 3 &&
                  FLATBUFFERS_VERSION_REVISION == 25,
              "Non-compatible flatbuffers version included");

struct CountingClientDataPayload;
struct CountingClientDataPayloadBuilder;

struct CountingGameStatePayload;
struct CountingGameStatePayloadBuilder;

struct Object;
struct ObjectBuilder;

struct GameStatePayloadType;
struct GameStatePayloadTypeBuilder;

struct HostPayloadType;
struct HostPayloadTypeBuilder;

struct JoinPayloadType;
struct JoinPayloadTypeBuilder;

struct LeaderboardPayloadType;
struct LeaderboardPayloadTypeBuilder;

struct Message;
struct MessageBuilder;

enum Shape : int8_t {
  Shape_Circle = 0,
  Shape_Square = 1,
  Shape_Triangle = 2,
  Shape_MIN = Shape_Circle,
  Shape_MAX = Shape_Triangle
};

inline const Shape (&EnumValuesShape())[3] {
  static const Shape values[] = {Shape_Circle, Shape_Square, Shape_Triangle};
  return values;
}

inline const char *const *EnumNamesShape() {
  static const char *const names[4] = {"Circle", "Square", "Triangle", nullptr};
  return names;
}

inline const char *EnumNameShape(Shape e) {
  if (::flatbuffers::IsOutRange(e, Shape_Circle, Shape_Triangle)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesShape()[index];
}

enum GameStateType : int8_t {
  GameStateType_CountingClientData = 0,
  GameStateType_CountingGameState = 1,
  GameStateType_MIN = GameStateType_CountingClientData,
  GameStateType_MAX = GameStateType_CountingGameState
};

inline const GameStateType (&EnumValuesGameStateType())[2] {
  static const GameStateType values[] = {GameStateType_CountingClientData,
                                         GameStateType_CountingGameState};
  return values;
}

inline const char *const *EnumNamesGameStateType() {
  static const char *const names[3] = {"CountingClientData",
                                       "CountingGameState", nullptr};
  return names;
}

inline const char *EnumNameGameStateType(GameStateType e) {
  if (::flatbuffers::IsOutRange(e, GameStateType_CountingClientData,
                                GameStateType_CountingGameState))
    return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesGameStateType()[index];
}

enum GameStatePayload : uint8_t {
  GameStatePayload_NONE = 0,
  GameStatePayload_CountingClientDataPayload = 1,
  GameStatePayload_CountingGameStatePayload = 2,
  GameStatePayload_MIN = GameStatePayload_NONE,
  GameStatePayload_MAX = GameStatePayload_CountingGameStatePayload
};

inline const GameStatePayload (&EnumValuesGameStatePayload())[3] {
  static const GameStatePayload values[] = {
      GameStatePayload_NONE, GameStatePayload_CountingClientDataPayload,
      GameStatePayload_CountingGameStatePayload};
  return values;
}

inline const char *const *EnumNamesGameStatePayload() {
  static const char *const names[4] = {"NONE", "CountingClientDataPayload",
                                       "CountingGameStatePayload", nullptr};
  return names;
}

inline const char *EnumNameGameStatePayload(GameStatePayload e) {
  if (::flatbuffers::IsOutRange(e, GameStatePayload_NONE,
                                GameStatePayload_CountingGameStatePayload))
    return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesGameStatePayload()[index];
}

template <typename T>
struct GameStatePayloadTraits {
  static const GameStatePayload enum_value = GameStatePayload_NONE;
};

template <>
struct GameStatePayloadTraits<CountingClientDataPayload> {
  static const GameStatePayload enum_value =
      GameStatePayload_CountingClientDataPayload;
};

template <>
struct GameStatePayloadTraits<CountingGameStatePayload> {
  static const GameStatePayload enum_value =
      GameStatePayload_CountingGameStatePayload;
};

bool VerifyGameStatePayload(::flatbuffers::Verifier &verifier, const void *obj,
                            GameStatePayload type);
bool VerifyGameStatePayloadVector(
    ::flatbuffers::Verifier &verifier,
    const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values,
    const ::flatbuffers::Vector<uint8_t> *types);

enum MessageType : int8_t {
  MessageType_GameState = 0,
  MessageType_Host = 1,
  MessageType_Join = 2,
  MessageType_Leaderboard = 3,
  MessageType_MIN = MessageType_GameState,
  MessageType_MAX = MessageType_Leaderboard
};

inline const MessageType (&EnumValuesMessageType())[4] {
  static const MessageType values[] = {MessageType_GameState, MessageType_Host,
                                       MessageType_Join,
                                       MessageType_Leaderboard};
  return values;
}

inline const char *const *EnumNamesMessageType() {
  static const char *const names[5] = {"GameState", "Host", "Join",
                                       "Leaderboard", nullptr};
  return names;
}

inline const char *EnumNameMessageType(MessageType e) {
  if (::flatbuffers::IsOutRange(e, MessageType_GameState,
                                MessageType_Leaderboard))
    return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMessageType()[index];
}

enum Payload : uint8_t {
  Payload_NONE = 0,
  Payload_GameStatePayloadType = 1,
  Payload_HostPayloadType = 2,
  Payload_JoinPayloadType = 3,
  Payload_LeaderboardPayloadType = 4,
  Payload_MIN = Payload_NONE,
  Payload_MAX = Payload_LeaderboardPayloadType
};

inline const Payload (&EnumValuesPayload())[5] {
  static const Payload values[] = {
      Payload_NONE, Payload_GameStatePayloadType, Payload_HostPayloadType,
      Payload_JoinPayloadType, Payload_LeaderboardPayloadType};
  return values;
}

inline const char *const *EnumNamesPayload() {
  static const char *const names[6] = {"NONE",
                                       "GameStatePayloadType",
                                       "HostPayloadType",
                                       "JoinPayloadType",
                                       "LeaderboardPayloadType",
                                       nullptr};
  return names;
}

inline const char *EnumNamePayload(Payload e) {
  if (::flatbuffers::IsOutRange(e, Payload_NONE,
                                Payload_LeaderboardPayloadType))
    return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPayload()[index];
}

template <typename T>
struct PayloadTraits {
  static const Payload enum_value = Payload_NONE;
};

template <>
struct PayloadTraits<GameStatePayloadType> {
  static const Payload enum_value = Payload_GameStatePayloadType;
};

template <>
struct PayloadTraits<HostPayloadType> {
  static const Payload enum_value = Payload_HostPayloadType;
};

template <>
struct PayloadTraits<JoinPayloadType> {
  static const Payload enum_value = Payload_JoinPayloadType;
};

template <>
struct PayloadTraits<LeaderboardPayloadType> {
  static const Payload enum_value = Payload_LeaderboardPayloadType;
};

bool VerifyPayload(::flatbuffers::Verifier &verifier, const void *obj,
                   Payload type);
bool VerifyPayloadVector(
    ::flatbuffers::Verifier &verifier,
    const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values,
    const ::flatbuffers::Vector<uint8_t> *types);

struct CountingClientDataPayload FLATBUFFERS_FINAL_CLASS
    : private ::flatbuffers::Table {
  typedef CountingClientDataPayloadBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NEW_INT = 4
  };
  int16_t new_int() const { return GetField<int16_t>(VT_NEW_INT, 0); }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_NEW_INT, 2) && verifier.EndTable();
  }
};

struct CountingClientDataPayloadBuilder {
  typedef CountingClientDataPayload Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_new_int(int16_t new_int) {
    fbb_.AddElement<int16_t>(CountingClientDataPayload::VT_NEW_INT, new_int, 0);
  }
  explicit CountingClientDataPayloadBuilder(
      ::flatbuffers::FlatBufferBuilder &_fbb)
      : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CountingClientDataPayload> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CountingClientDataPayload>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CountingClientDataPayload>
CreateCountingClientDataPayload(::flatbuffers::FlatBufferBuilder &_fbb,
                                int16_t new_int = 0) {
  CountingClientDataPayloadBuilder builder_(_fbb);
  builder_.add_new_int(new_int);
  return builder_.Finish();
}

struct CountingGameStatePayload FLATBUFFERS_FINAL_CLASS
    : private ::flatbuffers::Table {
  typedef CountingGameStatePayloadBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECTS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<Object>> *objects() const {
    return GetPointer<
        const ::flatbuffers::Vector<::flatbuffers::Offset<Object>> *>(
        VT_OBJECTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) && VerifyOffset(verifier, VT_OBJECTS) &&
           verifier.VerifyVector(objects()) &&
           verifier.VerifyVectorOfTables(objects()) && verifier.EndTable();
  }
};

struct CountingGameStatePayloadBuilder {
  typedef CountingGameStatePayload Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_objects(::flatbuffers::Offset<
                   ::flatbuffers::Vector<::flatbuffers::Offset<Object>>>
                       objects) {
    fbb_.AddOffset(CountingGameStatePayload::VT_OBJECTS, objects);
  }
  explicit CountingGameStatePayloadBuilder(
      ::flatbuffers::FlatBufferBuilder &_fbb)
      : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CountingGameStatePayload> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CountingGameStatePayload>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CountingGameStatePayload>
CreateCountingGameStatePayload(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Object>>>
        objects = 0) {
  CountingGameStatePayloadBuilder builder_(_fbb);
  builder_.add_objects(objects);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CountingGameStatePayload>
CreateCountingGameStatePayloadDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<Object>> *objects = nullptr) {
  auto objects__ =
      objects ? _fbb.CreateVector<::flatbuffers::Offset<Object>>(*objects) : 0;
  return CreateCountingGameStatePayload(_fbb, objects__);
}

struct Object FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ObjectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SHAPE = 4,
    VT_X_POS = 6,
    VT_Y_POS = 8
  };
  Shape shape() const {
    return static_cast<Shape>(GetField<int8_t>(VT_SHAPE, 0));
  }
  int16_t x_pos() const { return GetField<int16_t>(VT_X_POS, 0); }
  int16_t y_pos() const { return GetField<int16_t>(VT_Y_POS, 0); }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_SHAPE, 1) &&
           VerifyField<int16_t>(verifier, VT_X_POS, 2) &&
           VerifyField<int16_t>(verifier, VT_Y_POS, 2) && verifier.EndTable();
  }
};

struct ObjectBuilder {
  typedef Object Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_shape(Shape shape) {
    fbb_.AddElement<int8_t>(Object::VT_SHAPE, static_cast<int8_t>(shape), 0);
  }
  void add_x_pos(int16_t x_pos) {
    fbb_.AddElement<int16_t>(Object::VT_X_POS, x_pos, 0);
  }
  void add_y_pos(int16_t y_pos) {
    fbb_.AddElement<int16_t>(Object::VT_Y_POS, y_pos, 0);
  }
  explicit ObjectBuilder(::flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Object> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Object>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Object> CreateObject(
    ::flatbuffers::FlatBufferBuilder &_fbb, Shape shape = Shape_Circle,
    int16_t x_pos = 0, int16_t y_pos = 0) {
  ObjectBuilder builder_(_fbb);
  builder_.add_y_pos(y_pos);
  builder_.add_x_pos(x_pos);
  builder_.add_shape(shape);
  return builder_.Finish();
}

struct GameStatePayloadType FLATBUFFERS_FINAL_CLASS
    : private ::flatbuffers::Table {
  typedef GameStatePayloadTypeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GAMESTATETYPE = 4,
    VT_GAMESTATEPAYLOAD_TYPE = 6,
    VT_GAMESTATEPAYLOAD = 8
  };
  GameStateType gamestatetype() const {
    return static_cast<GameStateType>(GetField<int8_t>(VT_GAMESTATETYPE, 0));
  }
  GameStatePayload gamestatepayload_type() const {
    return static_cast<GameStatePayload>(
        GetField<uint8_t>(VT_GAMESTATEPAYLOAD_TYPE, 0));
  }
  const void *gamestatepayload() const {
    return GetPointer<const void *>(VT_GAMESTATEPAYLOAD);
  }
  template <typename T>
  const T *gamestatepayload_as() const;
  const CountingClientDataPayload *
  gamestatepayload_as_CountingClientDataPayload() const {
    return gamestatepayload_type() == GameStatePayload_CountingClientDataPayload
               ? static_cast<const CountingClientDataPayload *>(
                     gamestatepayload())
               : nullptr;
  }
  const CountingGameStatePayload *gamestatepayload_as_CountingGameStatePayload()
      const {
    return gamestatepayload_type() == GameStatePayload_CountingGameStatePayload
               ? static_cast<const CountingGameStatePayload *>(
                     gamestatepayload())
               : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_GAMESTATETYPE, 1) &&
           VerifyField<uint8_t>(verifier, VT_GAMESTATEPAYLOAD_TYPE, 1) &&
           VerifyOffset(verifier, VT_GAMESTATEPAYLOAD) &&
           VerifyGameStatePayload(verifier, gamestatepayload(),
                                  gamestatepayload_type()) &&
           verifier.EndTable();
  }
};

template <>
inline const CountingClientDataPayload *
GameStatePayloadType::gamestatepayload_as<CountingClientDataPayload>() const {
  return gamestatepayload_as_CountingClientDataPayload();
}

template <>
inline const CountingGameStatePayload *
GameStatePayloadType::gamestatepayload_as<CountingGameStatePayload>() const {
  return gamestatepayload_as_CountingGameStatePayload();
}

struct GameStatePayloadTypeBuilder {
  typedef GameStatePayloadType Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_gamestatetype(GameStateType gamestatetype) {
    fbb_.AddElement<int8_t>(GameStatePayloadType::VT_GAMESTATETYPE,
                            static_cast<int8_t>(gamestatetype), 0);
  }
  void add_gamestatepayload_type(GameStatePayload gamestatepayload_type) {
    fbb_.AddElement<uint8_t>(GameStatePayloadType::VT_GAMESTATEPAYLOAD_TYPE,
                             static_cast<uint8_t>(gamestatepayload_type), 0);
  }
  void add_gamestatepayload(::flatbuffers::Offset<void> gamestatepayload) {
    fbb_.AddOffset(GameStatePayloadType::VT_GAMESTATEPAYLOAD, gamestatepayload);
  }
  explicit GameStatePayloadTypeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
      : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GameStatePayloadType> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GameStatePayloadType>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GameStatePayloadType> CreateGameStatePayloadType(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    GameStateType gamestatetype = GameStateType_CountingClientData,
    GameStatePayload gamestatepayload_type = GameStatePayload_NONE,
    ::flatbuffers::Offset<void> gamestatepayload = 0) {
  GameStatePayloadTypeBuilder builder_(_fbb);
  builder_.add_gamestatepayload(gamestatepayload);
  builder_.add_gamestatepayload_type(gamestatepayload_type);
  builder_.add_gamestatetype(gamestatetype);
  return builder_.Finish();
}

struct HostPayloadType FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef HostPayloadTypeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ROOM_ID = 4
  };
  int16_t room_id() const { return GetField<int16_t>(VT_ROOM_ID, 0); }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_ROOM_ID, 2) && verifier.EndTable();
  }
};

struct HostPayloadTypeBuilder {
  typedef HostPayloadType Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_room_id(int16_t room_id) {
    fbb_.AddElement<int16_t>(HostPayloadType::VT_ROOM_ID, room_id, 0);
  }
  explicit HostPayloadTypeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
      : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<HostPayloadType> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<HostPayloadType>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<HostPayloadType> CreateHostPayloadType(
    ::flatbuffers::FlatBufferBuilder &_fbb, int16_t room_id = 0) {
  HostPayloadTypeBuilder builder_(_fbb);
  builder_.add_room_id(room_id);
  return builder_.Finish();
}

struct JoinPayloadType FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef JoinPayloadTypeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SUCCESS = 4
  };
  bool success() const { return GetField<uint8_t>(VT_SUCCESS, 0) != 0; }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS, 1) && verifier.EndTable();
  }
};

struct JoinPayloadTypeBuilder {
  typedef JoinPayloadType Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(JoinPayloadType::VT_SUCCESS,
                             static_cast<uint8_t>(success), 0);
  }
  explicit JoinPayloadTypeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
      : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<JoinPayloadType> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<JoinPayloadType>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<JoinPayloadType> CreateJoinPayloadType(
    ::flatbuffers::FlatBufferBuilder &_fbb, bool success = false) {
  JoinPayloadTypeBuilder builder_(_fbb);
  builder_.add_success(success);
  return builder_.Finish();
}

struct LeaderboardPayloadType FLATBUFFERS_FINAL_CLASS
    : private ::flatbuffers::Table {
  typedef LeaderboardPayloadTypeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SUCCESS = 4
  };
  int16_t success() const { return GetField<int16_t>(VT_SUCCESS, 0); }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_SUCCESS, 2) && verifier.EndTable();
  }
};

struct LeaderboardPayloadTypeBuilder {
  typedef LeaderboardPayloadType Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_success(int16_t success) {
    fbb_.AddElement<int16_t>(LeaderboardPayloadType::VT_SUCCESS, success, 0);
  }
  explicit LeaderboardPayloadTypeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
      : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LeaderboardPayloadType> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LeaderboardPayloadType>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LeaderboardPayloadType>
CreateLeaderboardPayloadType(::flatbuffers::FlatBufferBuilder &_fbb,
                             int16_t success = 0) {
  LeaderboardPayloadTypeBuilder builder_(_fbb);
  builder_.add_success(success);
  return builder_.Finish();
}

struct Message FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_PAYLOAD_TYPE = 6,
    VT_PAYLOAD = 8
  };
  MessageType type() const {
    return static_cast<MessageType>(GetField<int8_t>(VT_TYPE, 0));
  }
  Payload payload_type() const {
    return static_cast<Payload>(GetField<uint8_t>(VT_PAYLOAD_TYPE, 0));
  }
  const void *payload() const { return GetPointer<const void *>(VT_PAYLOAD); }
  template <typename T>
  const T *payload_as() const;
  const GameStatePayloadType *payload_as_GameStatePayloadType() const {
    return payload_type() == Payload_GameStatePayloadType
               ? static_cast<const GameStatePayloadType *>(payload())
               : nullptr;
  }
  const HostPayloadType *payload_as_HostPayloadType() const {
    return payload_type() == Payload_HostPayloadType
               ? static_cast<const HostPayloadType *>(payload())
               : nullptr;
  }
  const JoinPayloadType *payload_as_JoinPayloadType() const {
    return payload_type() == Payload_JoinPayloadType
               ? static_cast<const JoinPayloadType *>(payload())
               : nullptr;
  }
  const LeaderboardPayloadType *payload_as_LeaderboardPayloadType() const {
    return payload_type() == Payload_LeaderboardPayloadType
               ? static_cast<const LeaderboardPayloadType *>(payload())
               : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyField<uint8_t>(verifier, VT_PAYLOAD_TYPE, 1) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           VerifyPayload(verifier, payload(), payload_type()) &&
           verifier.EndTable();
  }
};

template <>
inline const GameStatePayloadType *Message::payload_as<GameStatePayloadType>()
    const {
  return payload_as_GameStatePayloadType();
}

template <>
inline const HostPayloadType *Message::payload_as<HostPayloadType>() const {
  return payload_as_HostPayloadType();
}

template <>
inline const JoinPayloadType *Message::payload_as<JoinPayloadType>() const {
  return payload_as_JoinPayloadType();
}

template <>
inline const LeaderboardPayloadType *
Message::payload_as<LeaderboardPayloadType>() const {
  return payload_as_LeaderboardPayloadType();
}

struct MessageBuilder {
  typedef Message Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(MessageType type) {
    fbb_.AddElement<int8_t>(Message::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_payload_type(Payload payload_type) {
    fbb_.AddElement<uint8_t>(Message::VT_PAYLOAD_TYPE,
                             static_cast<uint8_t>(payload_type), 0);
  }
  void add_payload(::flatbuffers::Offset<void> payload) {
    fbb_.AddOffset(Message::VT_PAYLOAD, payload);
  }
  explicit MessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Message> CreateMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    MessageType type = MessageType_GameState,
    Payload payload_type = Payload_NONE,
    ::flatbuffers::Offset<void> payload = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_payload_type(payload_type);
  builder_.add_type(type);
  return builder_.Finish();
}

inline bool VerifyGameStatePayload(::flatbuffers::Verifier &verifier,
                                   const void *obj, GameStatePayload type) {
  switch (type) {
    case GameStatePayload_NONE: {
      return true;
    }
    case GameStatePayload_CountingClientDataPayload: {
      auto ptr = reinterpret_cast<const CountingClientDataPayload *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GameStatePayload_CountingGameStatePayload: {
      auto ptr = reinterpret_cast<const CountingGameStatePayload *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default:
      return true;
  }
}

inline bool VerifyGameStatePayloadVector(
    ::flatbuffers::Verifier &verifier,
    const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values,
    const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyGameStatePayload(verifier, values->Get(i),
                                types->GetEnum<GameStatePayload>(i))) {
      return false;
    }
  }
  return true;
}

inline bool VerifyPayload(::flatbuffers::Verifier &verifier, const void *obj,
                          Payload type) {
  switch (type) {
    case Payload_NONE: {
      return true;
    }
    case Payload_GameStatePayloadType: {
      auto ptr = reinterpret_cast<const GameStatePayloadType *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_HostPayloadType: {
      auto ptr = reinterpret_cast<const HostPayloadType *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_JoinPayloadType: {
      auto ptr = reinterpret_cast<const JoinPayloadType *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_LeaderboardPayloadType: {
      auto ptr = reinterpret_cast<const LeaderboardPayloadType *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default:
      return true;
  }
}

inline bool VerifyPayloadVector(
    ::flatbuffers::Verifier &verifier,
    const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values,
    const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyPayload(verifier, values->Get(i), types->GetEnum<Payload>(i))) {
      return false;
    }
  }
  return true;
}

inline const Message *GetMessage(const void *buf) {
  return ::flatbuffers::GetRoot<Message>(buf);
}

inline const Message *GetSizePrefixedMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Message>(buf);
}

inline bool VerifyMessageBuffer(::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Message>(nullptr);
}

inline void FinishMessageBuffer(::flatbuffers::FlatBufferBuilder &fbb,
                                ::flatbuffers::Offset<Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Message> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_MESSAGECLASS_H_
