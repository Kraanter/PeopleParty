// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_MESSAGECLASS_H_
#define FLATBUFFERS_GENERATED_MESSAGECLASS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
                  FLATBUFFERS_VERSION_MINOR == 3 &&
                  FLATBUFFERS_VERSION_REVISION == 25,
              "Non-compatible flatbuffers version included");

struct HostPayloadType;
struct HostPayloadTypeBuilder;

struct JoinPayloadType;
struct JoinPayloadTypeBuilder;

struct Message;
struct MessageBuilder;

enum MessageType : int8_t {
  MessageType_Host = 0,
  MessageType_Join = 1,
  MessageType_MIN = MessageType_Host,
  MessageType_MAX = MessageType_Join
};

inline const MessageType (&EnumValuesMessageType())[2] {
  static const MessageType values[] = {MessageType_Host, MessageType_Join};
  return values;
}

inline const char *const *EnumNamesMessageType() {
  static const char *const names[3] = {"Host", "Join", nullptr};
  return names;
}

inline const char *EnumNameMessageType(MessageType e) {
  if (::flatbuffers::IsOutRange(e, MessageType_Host, MessageType_Join))
    return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMessageType()[index];
}

enum Payload : uint8_t {
  Payload_NONE = 0,
  Payload_HostPayloadType = 1,
  Payload_JoinPayloadType = 2,
  Payload_MIN = Payload_NONE,
  Payload_MAX = Payload_JoinPayloadType
};

inline const Payload (&EnumValuesPayload())[3] {
  static const Payload values[] = {Payload_NONE, Payload_HostPayloadType,
                                   Payload_JoinPayloadType};
  return values;
}

inline const char *const *EnumNamesPayload() {
  static const char *const names[4] = {"NONE", "HostPayloadType",
                                       "JoinPayloadType", nullptr};
  return names;
}

inline const char *EnumNamePayload(Payload e) {
  if (::flatbuffers::IsOutRange(e, Payload_NONE, Payload_JoinPayloadType))
    return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPayload()[index];
}

template <typename T>
struct PayloadTraits {
  static const Payload enum_value = Payload_NONE;
};

template <>
struct PayloadTraits<HostPayloadType> {
  static const Payload enum_value = Payload_HostPayloadType;
};

template <>
struct PayloadTraits<JoinPayloadType> {
  static const Payload enum_value = Payload_JoinPayloadType;
};

bool VerifyPayload(::flatbuffers::Verifier &verifier, const void *obj,
                   Payload type);
bool VerifyPayloadVector(
    ::flatbuffers::Verifier &verifier,
    const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values,
    const ::flatbuffers::Vector<uint8_t> *types);

struct HostPayloadType FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef HostPayloadTypeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ROOM_ID = 4
  };
  int16_t room_id() const { return GetField<int16_t>(VT_ROOM_ID, 0); }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_ROOM_ID, 2) && verifier.EndTable();
  }
};

struct HostPayloadTypeBuilder {
  typedef HostPayloadType Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_room_id(int16_t room_id) {
    fbb_.AddElement<int16_t>(HostPayloadType::VT_ROOM_ID, room_id, 0);
  }
  explicit HostPayloadTypeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
      : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<HostPayloadType> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<HostPayloadType>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<HostPayloadType> CreateHostPayloadType(
    ::flatbuffers::FlatBufferBuilder &_fbb, int16_t room_id = 0) {
  HostPayloadTypeBuilder builder_(_fbb);
  builder_.add_room_id(room_id);
  return builder_.Finish();
}

struct JoinPayloadType FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef JoinPayloadTypeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SUCCESS = 4
  };
  bool success() const { return GetField<uint8_t>(VT_SUCCESS, 0) != 0; }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS, 1) && verifier.EndTable();
  }
};

struct JoinPayloadTypeBuilder {
  typedef JoinPayloadType Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(JoinPayloadType::VT_SUCCESS,
                             static_cast<uint8_t>(success), 0);
  }
  explicit JoinPayloadTypeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
      : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<JoinPayloadType> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<JoinPayloadType>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<JoinPayloadType> CreateJoinPayloadType(
    ::flatbuffers::FlatBufferBuilder &_fbb, bool success = false) {
  JoinPayloadTypeBuilder builder_(_fbb);
  builder_.add_success(success);
  return builder_.Finish();
}

struct Message FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_PAYLOAD_TYPE = 6,
    VT_PAYLOAD = 8
  };
  MessageType type() const {
    return static_cast<MessageType>(GetField<int8_t>(VT_TYPE, 0));
  }
  Payload payload_type() const {
    return static_cast<Payload>(GetField<uint8_t>(VT_PAYLOAD_TYPE, 0));
  }
  const void *payload() const { return GetPointer<const void *>(VT_PAYLOAD); }
  template <typename T>
  const T *payload_as() const;
  const HostPayloadType *payload_as_HostPayloadType() const {
    return payload_type() == Payload_HostPayloadType
               ? static_cast<const HostPayloadType *>(payload())
               : nullptr;
  }
  const JoinPayloadType *payload_as_JoinPayloadType() const {
    return payload_type() == Payload_JoinPayloadType
               ? static_cast<const JoinPayloadType *>(payload())
               : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyField<uint8_t>(verifier, VT_PAYLOAD_TYPE, 1) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           VerifyPayload(verifier, payload(), payload_type()) &&
           verifier.EndTable();
  }
};

template <>
inline const HostPayloadType *Message::payload_as<HostPayloadType>() const {
  return payload_as_HostPayloadType();
}

template <>
inline const JoinPayloadType *Message::payload_as<JoinPayloadType>() const {
  return payload_as_JoinPayloadType();
}

struct MessageBuilder {
  typedef Message Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(MessageType type) {
    fbb_.AddElement<int8_t>(Message::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_payload_type(Payload payload_type) {
    fbb_.AddElement<uint8_t>(Message::VT_PAYLOAD_TYPE,
                             static_cast<uint8_t>(payload_type), 0);
  }
  void add_payload(::flatbuffers::Offset<void> payload) {
    fbb_.AddOffset(Message::VT_PAYLOAD, payload);
  }
  explicit MessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Message> CreateMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb, MessageType type = MessageType_Host,
    Payload payload_type = Payload_NONE,
    ::flatbuffers::Offset<void> payload = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_payload_type(payload_type);
  builder_.add_type(type);
  return builder_.Finish();
}

inline bool VerifyPayload(::flatbuffers::Verifier &verifier, const void *obj,
                          Payload type) {
  switch (type) {
    case Payload_NONE: {
      return true;
    }
    case Payload_HostPayloadType: {
      auto ptr = reinterpret_cast<const HostPayloadType *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_JoinPayloadType: {
      auto ptr = reinterpret_cast<const JoinPayloadType *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default:
      return true;
  }
}

inline bool VerifyPayloadVector(
    ::flatbuffers::Verifier &verifier,
    const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values,
    const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyPayload(verifier, values->Get(i), types->GetEnum<Payload>(i))) {
      return false;
    }
  }
  return true;
}

inline const Message *GetMessage(const void *buf) {
  return ::flatbuffers::GetRoot<Message>(buf);
}

inline const Message *GetSizePrefixedMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Message>(buf);
}

inline bool VerifyMessageBuffer(::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Message>(nullptr);
}

inline void FinishMessageBuffer(::flatbuffers::FlatBufferBuilder &fbb,
                                ::flatbuffers::Offset<Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Message> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_MESSAGECLASS_H_
