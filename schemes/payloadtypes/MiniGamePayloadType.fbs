// Automatically generated main schema file
// Include all gamestate types to build the MiniGamePayloadType scheme

include "minigamedata/BusinessBailout/BusinessBailoutHostPayload.fbs";
include "minigamedata/BusinessBailout/BusinessBailoutResultPayload.fbs";
include "minigamedata/BusinessBailout/BusinessBailoutPlayerPayload.fbs";
include "minigamedata/BusinessBailout/BusinessBailoutPlayerInputPayload.fbs";
include "minigamedata/MemoryMixer/MemoryMixerGridPayload.fbs";
include "minigamedata/MemoryMixer/MemoryMixerRoundResultPayload.fbs";
include "minigamedata/MemoryMixer/MemoryMixerResultPayload.fbs";
include "minigamedata/MemoryMixer/MemoryMixerPlayerSubmittedPayload.fbs";
include "minigamedata/MemoryMixer/MemoryMixerPlayerInputPayload.fbs";
include "minigamedata/RPSBracket/RPSBracketPlayerPayload.fbs";
include "minigamedata/RPSBracket/RPSBracketPlayerInputPayload.fbs";
include "minigamedata/RPSBracket/RPSBracketHostPayload.fbs";
include "minigamedata/LaunchParty/LaunchPartyResultPayload.fbs";
include "minigamedata/LaunchParty/LaunchPartyPlayerInputPayload.fbs";
include "minigamedata/LaunchParty/LaunchPartyLightsPayload.fbs";
include "minigamedata/LaunchParty/LaunchPartyPlayerTimePayload.fbs";
include "minigamedata/CrazyCounting/CrazyCountingPlayerUpdatePayload.fbs";
include "minigamedata/CrazyCounting/CrazyCountingHostEntitiesPayload.fbs";
include "minigamedata/CrazyCounting/CrazyCountingPlayerInputPayload.fbs";
include "minigamedata/CrazyCounting/CrazyCountingResultPayload.fbs";
include "minigamedata/MiniGameIntroductionPayload.fbs";

enum GameStateType: byte {
    BusinessBailoutHost,
    BusinessBailoutResult,
    BusinessBailoutPlayer,
    BusinessBailoutPlayerInput,
    MemoryMixerGrid,
    MemoryMixerRoundResult,
    MemoryMixerResult,
    MemoryMixerPlayerSubmitted,
    MemoryMixerPlayerInput,
    RPSBracketPlayer,
    RPSBracketPlayerInput,
    RPSBracketHost,
    LaunchPartyResult,
    LaunchPartyPlayerInput,
    LaunchPartyLights,
    LaunchPartyPlayerTime,
    CrazyCountingPlayerUpdate,
    CrazyCountingHostEntities,
    CrazyCountingPlayerInput,
    CrazyCountingResult,
    MiniGameIntroduction,
}

union GameStatePayload {
    BusinessBailoutHostPayload,
    BusinessBailoutResultPayload,
    BusinessBailoutPlayerPayload,
    BusinessBailoutPlayerInputPayload,
    MemoryMixerGridPayload,
    MemoryMixerRoundResultPayload,
    MemoryMixerResultPayload,
    MemoryMixerPlayerSubmittedPayload,
    MemoryMixerPlayerInputPayload,
    RPSBracketPlayerPayload,
    RPSBracketPlayerInputPayload,
    RPSBracketHostPayload,
    LaunchPartyResultPayload,
    LaunchPartyPlayerInputPayload,
    LaunchPartyLightsPayload,
    LaunchPartyPlayerTimePayload,
    CrazyCountingPlayerUpdatePayload,
    CrazyCountingHostEntitiesPayload,
    CrazyCountingPlayerInputPayload,
    CrazyCountingResultPayload,
    MiniGameIntroductionPayload,
}

table MiniGamePayloadType {
    minigame: string;
    gamestatetype: GameStateType;
    gamestatepayload: GameStatePayload;
}

root_type MiniGamePayloadType;
