// Automatically generated main schema file
// Include all gamestate types to build the MiniGamePayloadType scheme

include "minigamedata/BusinessBailout/BusinessBailoutHostPayload.fbs";
include "minigamedata/BusinessBailout/BusinessBailoutResultPayload.fbs";
include "minigamedata/BusinessBailout/BusinessBailoutPlayerPayload.fbs";
include "minigamedata/BusinessBailout/BusinessBailoutPlayerInputPayload.fbs";
include "minigamedata/CrazyCounting/CrazyCountingPlayerUpdatePayload.fbs";
include "minigamedata/CrazyCounting/CrazyCountingHostEntitiesPayload.fbs";
include "minigamedata/CrazyCounting/CrazyCountingPlayerInputPayload.fbs";
include "minigamedata/CrazyCounting/CrazyCountingResultPayload.fbs";
include "minigamedata/MiniGameIntroductionPayload.fbs";

enum GameStateType: byte {
    BusinessBailoutHost,
    BusinessBailoutResult,
    BusinessBailoutPlayer,
    BusinessBailoutPlayerInput,
    CrazyCountingPlayerUpdate,
    CrazyCountingHostEntities,
    CrazyCountingPlayerInput,
    CrazyCountingResult,
    MiniGameIntroduction,
}

union GameStatePayload {
    BusinessBailoutHostPayload,
    BusinessBailoutResultPayload,
    BusinessBailoutPlayerPayload,
    BusinessBailoutPlayerInputPayload,
    CrazyCountingPlayerUpdatePayload,
    CrazyCountingHostEntitiesPayload,
    CrazyCountingPlayerInputPayload,
    CrazyCountingResultPayload,
    MiniGameIntroductionPayload,
}

table MiniGamePayloadType {
    minigame: string;
    gamestatetype: GameStateType;
    gamestatepayload: GameStatePayload;
}

root_type MiniGamePayloadType;
